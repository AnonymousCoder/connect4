{"version":3,"sources":["reducers/game/dropCoin.ts","config.ts","reducers/game/board.ts","reducers/game/getInitialBoard.ts","reducers/game/index.ts","reducers/index.ts","reducers/game/selectors/testCombinationAt.ts","reducers/game/selectors/testCombination.ts","reducers/selectors.ts","reducers/game/selectors/getBoard.ts","reducers/game/selectors/getCurrentPlayer.ts","reducers/game/selectors/getWinner.ts","components/Cell.tsx","components/Row.tsx","components/Board.tsx","actions/dropCoin.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["dropCoin","state","column","color","validRow","row","length","newState","boardWidth","boardHeight","winningCombinations","initialState","board","gameRow","push","getInitialBoard","reducer","combineReducers","action","type","payload","rootReducer","game","testCombinationAt","combination","cell","x","y","nextRow","nextColumn","testCombination","getBoard","fromBoard","getCurrentPlayer","reds","yellows","getWinner","winner","Cell","this","props","winningColumn","onClick","classes","cn","animated","shouldAnimate","className","React","Component","Row","colors","cellComponents","map","index","key","BoardComponent","displayRow","displayHeader","Board","connect","App","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8fa0f82.chunk.js","sourcesContent":["import { BoardState } from \"./board\";\nimport { Color } from \"../../types\";\n\nexport function dropCoin(\n  state: BoardState,\n  column: number,\n  color: Color\n): BoardState {\n  let validRow = null;\n\n  for (let row = 0; row < state.length; row++) {\n    if (state[row][column] === null) {\n      validRow = row;\n    }\n  }\n\n  if (validRow === null) {\n    return state;\n  }\n\n  const newState = [...state];\n  newState[validRow] = [...newState[validRow]];\n  newState[validRow][column] = color;\n\n  return newState;\n}\n","// A combination always starts at 0, 0 and\n// the following coordinates are relative to the first one\nconst horizontal = [\n  [0, 0],\n  [0, 1],\n  [0, 2],\n  [0, 3]\n];\n\nconst vertical = [\n  [0, 0],\n  [1, 0],\n  [2, 0],\n  [3, 0]\n];\n\nconst diagonalNorthEast = [\n  [0, 0],\n  [1, 1],\n  [2, 2],\n  [3, 3]\n];\n\nconst diagonalNorthWest = [\n  [0, 0],\n  [-1, 1],\n  [-2, 2],\n  [-3, 3]\n];\n\nconst square = [\n  [0, 0],\n  [0, 1],\n  [1, 0],\n  [1, 1]\n];\n\nexport type Combination = number[][];\n\nexport const boardWidth = 7;\nexport const boardHeight = 6;\n\nexport const winningCombinations: Combination[] = [\n  horizontal,\n  vertical,\n  diagonalNorthEast,\n  diagonalNorthWest,\n  square\n];\n","import { Color } from \"../../types\";\nimport { Action } from \"../../actions/types\";\nimport { dropCoin } from \"./dropCoin\";\nimport { getInitialBoard } from \"./getInitialBoard\";\n\nexport type BoardState = Color[][];\n\nconst initialState: BoardState = getInitialBoard();\n\nexport const reducer = (\n  state: BoardState = initialState,\n  action: Action\n): BoardState => {\n  switch (action.type) {\n    case \"DROP_COIN\":\n      const { column, color } = action.payload;\n      return dropCoin(state, column, color);\n\n    default:\n      return state;\n  }\n};\n","import { boardHeight, boardWidth } from \"../../config\";\nimport { BoardState } from \"./board\";\n\n/**\n * return an empty board according to the sizes\n * set in the config\n */\nexport function getInitialBoard(): BoardState {\n  const board: BoardState = [];\n\n  for (let row = 0; row < boardHeight; row++) {\n    const gameRow = [];\n\n    for (let column = 0; column < boardWidth; column++) {\n      gameRow.push(null);\n    }\n\n    board.push(gameRow);\n  }\n\n  return board;\n}\n","import { reducer as board } from \"./board\";\nimport { combineReducers } from \"redux\";\n\nexport const reducer = combineReducers({\n  board\n});\n\nexport type LocalState = ReturnType<typeof reducer>;\n","import { combineReducers } from \"redux\";\n\nimport { reducer as game } from \"./game\";\n\nexport const rootReducer = combineReducers({\n  game\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { Combination } from \"../../../config\";\nimport { BoardState } from \"../board\";\nimport { Color } from \"../../../types\";\n\n/**\n * Test is a given combination is successfull\n * at a given a column and row coordinate\n *\n * @param state the game board\n * @param combination a winning combination configuration\n * @param row a row coordinate on the board\n * @param column a column coordinate on the board\n */\nexport function testCombinationAt(\n  state: BoardState,\n  combination: Combination,\n  row: number,\n  column: number\n): Color {\n  // this is the original cell color, we'll confirm that every\n  // cell referred by the combination is the same\n  const cell = state[row][column];\n\n  for (const [x, y] of combination) {\n    const nextRow = row + x;\n    const nextColumn = column + y;\n\n    // if the next cell falls outside the board or the next cell\n    // does not contain a color, we consider the combination to be invalid\n    if (!state[nextRow] || !state[nextRow][nextColumn]) {\n      return null;\n    }\n\n    // if we found a different color the combination is also invalid\n    if (cell !== state[nextRow][nextColumn]) {\n      return null;\n    }\n  }\n\n  return cell;\n}\n","import { BoardState } from \"../board\";\nimport { Combination } from \"../../../config\";\nimport { testCombinationAt } from \"./testCombinationAt\";\nimport { Color } from \"../../../types\";\n\nexport interface WinningCoordinates {\n  row: number;\n  column: number;\n  combination: Combination;\n  color: Color;\n}\n\n/**\n * Test if a combination is valid for a given board\n * @param state the game board\n * @param combination a winning combination configuration\n */\nexport function testCombination(\n  state: BoardState,\n  combination: Combination\n): WinningCoordinates | null {\n  for (let row = 0; row < state.length; row++) {\n    for (let column = 0; column < state[row].length; column++) {\n      // only run if the current cell has a color\n      if (state[row][column] !== null) {\n        const color = testCombinationAt(state, combination, row, column);\n\n        if (color) {\n          return { color, row, column, combination };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n","import { RootState } from \".\";\n\nimport * as fromBoard from \"./game/selectors\";\n\nexport const getBoard = (state: RootState) => fromBoard.getBoard(state.game);\nexport const getCurrentPlayer = (state: RootState) =>\n  fromBoard.getCurrentPlayer(state.game);\nexport const getWinner = (state: RootState) => fromBoard.getWinner(state.game);\n","import { LocalState } from \"..\";\n\nexport const getBoard = (state: LocalState) => state.board;\n","import { LocalState } from \"..\";\nimport { Color } from \"../../../types\";\n\n/**\n * Return the current player (as a color) given a board game.\n */\nexport const getCurrentPlayer = (state: LocalState): Color => {\n  let reds = 0;\n  let yellows = 0;\n\n  for (const row of state.board) {\n    for (const cell of row) {\n      if (cell === \"red\") {\n        reds++;\n      } else if (cell === \"yellow\") {\n        yellows++;\n      }\n    }\n  }\n\n  return reds === yellows ? \"yellow\" : \"red\";\n};\n","import { LocalState } from \"..\";\nimport { winningCombinations } from \"../../../config\";\nimport { testCombination } from \"./testCombination\";\n\n/**\n * Test every possible winning combinations against the\n * current game board\n */\nexport function getWinner(state: LocalState) {\n  for (const combination of winningCombinations) {\n    const winner = testCombination(state.board, combination);\n\n    if (winner) {\n      return winner;\n    }\n  }\n\n  return null;\n}\n","import { Color } from \"../types\";\n\nimport React from \"react\";\nimport cn from \"classnames\";\nimport { WinningCoordinates } from \"../reducers/game/selectors/testCombination\";\n\ninterface Props {\n  color: Color;\n  row: number;\n  column: number;\n  onClick: () => void;\n  winner: WinningCoordinates | null;\n}\n\nexport class Cell extends React.Component<Props> {\n  // We want the winning cells to be animated to show\n  // the user the winning strike\n  shouldAnimate() {\n    const { winner, row, column, color } = this.props;\n\n    // if there is no winner yet or this cell has not yet\n    // been played we won't have it glowing for sure\n    if (!winner || !color) {\n      return false;\n    }\n\n    for (const [x, y] of winner.combination) {\n      const winningColumn = y + winner.column;\n      const winningRow = x + winner.row;\n\n      if (winningRow === row && winningColumn === column) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    const { color, onClick } = this.props;\n\n    const classes = cn(\"Game-Cell\", color, { animated: this.shouldAnimate() });\n\n    return <div onClick={onClick} className={classes}></div>;\n  }\n}\n","import React from \"react\";\nimport cn from \"classnames\";\n\nimport { Cell } from \"./Cell\";\nimport { Color } from \"../types\";\nimport { WinningCoordinates } from \"../reducers/game/selectors/testCombination\";\n\ninterface Props {\n  colors: Color[];\n  row: number;\n  dropCoin: (column: number) => () => void;\n  winner: WinningCoordinates | null;\n}\n\nexport const Row: React.FunctionComponent<Props> = ({\n  row,\n  colors,\n  dropCoin,\n  winner\n}) => {\n  const classes = cn(\"Game-Row\");\n\n  const cellComponents = colors.map((color, index) => (\n    <Cell\n      row={row}\n      column={index}\n      onClick={dropCoin(index)}\n      color={color}\n      key={`cell-${index}`}\n      winner={winner}\n    />\n  ));\n\n  return <div className={classes}>{cellComponents}</div>;\n};\n","import React from \"react\";\nimport cn from \"classnames\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../reducers\";\nimport { getBoard, getCurrentPlayer, getWinner } from \"../reducers/selectors\";\nimport { Row } from \"./Row\";\nimport { dropCoin } from \"../actions/dropCoin\";\nimport { Color } from \"../types\";\n\ninterface Props {\n  board: ReturnType<typeof getBoard>;\n  color: ReturnType<typeof getCurrentPlayer>;\n  winner: ReturnType<typeof getWinner>;\n  dropCoin: typeof dropCoin;\n}\n\nexport class BoardComponent extends React.Component<Props> {\n  dropCoin = (column: number) => () => {\n    // we only allow a player to drop a coin if there is no winner yet\n    if (!this.props.winner) {\n      this.props.dropCoin(column, this.props.color);\n    }\n  };\n\n  displayHeader() {\n    // only display the winner if there is one\n    if (this.props.winner) {\n      return <h2>Congratulations, {this.props.winner.color} wins the game!</h2>;\n    } else {\n      return <h2>It's {this.props.color}'s turn to play</h2>;\n    }\n  }\n\n  displayRow = (colors: Color[], key: number) => {\n    return (\n      <Row\n        row={key}\n        dropCoin={this.dropCoin}\n        colors={colors}\n        key={`column-${key}`}\n        winner={this.props.winner}\n      />\n    );\n  };\n\n  render() {\n    const classes = cn(\"Game-Board\");\n\n    return (\n      <>\n        {this.displayHeader()}\n\n        <div className=\"Game\">\n          <div className={classes}>{this.props.board.map(this.displayRow)}</div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapState = (state: RootState) => ({\n  board: getBoard(state),\n  color: getCurrentPlayer(state),\n  winner: getWinner(state)\n});\n\nexport const Board = connect(mapState, { dropCoin })(BoardComponent);\n","import { Color } from \"../types\";\n\nexport interface DropCoinAction {\n  type: \"DROP_COIN\";\n  payload: {\n    column: number;\n    color: Color;\n  };\n}\n\nexport function dropCoin(column: number, color: Color): DropCoinAction {\n  return {\n    type: \"DROP_COIN\",\n    payload: { column, color }\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Board } from \"./components/Board\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Connect four</h1>\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport { rootReducer } from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}